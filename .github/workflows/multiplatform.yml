name: Multi-Platform Release

on:
  push:
    tags: ['v*']
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        RELEASE_NAME="Release $TAG_NAME"
        BODY="## Multi-Platform Release

        This release includes binaries for:
        - Linux (x86_64)
        - Windows (x86_64)
        - macOS (x86_64)

        Download the appropriate binary for your platform."
        
        gh release create "$TAG_NAME" \
          --title "$RELEASE_NAME" \
          --notes "$BODY" \
          --latest

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: verascan
            asset_name: verascan-linux-musl-amd64
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            binary_name: verascan.exe
            asset_name: verascan-windows-gnu-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: verascan
            asset_name: verascan-macos-amd64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev pkg-config libssl-dev
    
    - name: Install mingw-w64 for Windows GNU target
      if: matrix.os == 'windows-latest'
      run: |
        # Install mingw-w64 via chocolatey
        choco install mingw
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        gh release upload "$TAG_NAME" \
          target/${{ matrix.target }}/release/${{ matrix.binary_name }} \
          --clobber
