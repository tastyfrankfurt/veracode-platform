name: Multi-Platform Release

on:
  push:
    tags: ['v*']
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        RELEASE_NAME="Release $TAG_NAME"
        BODY="## Multi-Platform Release

        This release includes binaries for:
        - Linux (x86_64 glibc)
        - Linux (x86_64 musl)
        - Windows (x86_64)
        - macOS (x86_64)

        Download the appropriate binary for your platform."
        
        gh release create "$TAG_NAME" \
          --title "$RELEASE_NAME" \
          --notes "$BODY" \
          --latest

  build:
    needs: create-release
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: verascan
            asset_name: verascan-linux-gnu-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: verascan
            asset_name: verascan-linux-musl-amd64
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            binary_name: verascan.exe
            asset_name: verascan-windows-gnu-amd64.exe
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: verascan
            asset_name: verascan-macos-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ca-certificates
        
    - name: Install musl tools for musl target
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get install -y musl-tools musl-dev
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        targets: ${{ matrix.target }}
        toolchain: stable
        override: true

    - name: Install build-essential for glibc Linux
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev pkg-config libc6-dev libssl3 libcrypto3

    - name: Install mingw-w64 for Windows GNU target
      if: matrix.os == 'windows-latest'
      run: |
        # Install mingw-w64 via chocolatey
        choco install mingw
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create zip archive Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release/
        7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}

    - name: Create zip archive Linux/Mac
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release/
        zip ../../../${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}
    
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        gh release upload "$TAG_NAME" \
          ${{ matrix.asset_name }}.zip